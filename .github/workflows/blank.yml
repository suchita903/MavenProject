name: Github Action Deployment

on:
  workflow_dispatch:
    inputs:
       Object_Code_choice: 
         type: choice
         description: 'Select the Object_Code'
         options:
         - None
         - All
         - A15
         - A43
         - A836
         - A215

       Child_Object_Code_Choice:
         type: choice
         description: ' Select the Child_object_code'
         options:
         - None
         - E01
         - E90
         - E66

       Workflow_Type_Choice: 
         type: choice
         description: 'Select WORKFLOW'
         required: true
         options:
          - ICD
          - Harness

jobs:
  Checkout:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'  
      
    - name: Create Folder Structure
      run: |
        mkdir -p "https://github.com/suchita903/Demo_2024/#${{ env.WORKSPACE_URL }}/Input"
        
        if [ "$WORKFLOW" = "ICD" ]; then
            mv Build_xml "https://github.com/suchita903/Demo123/#${{ env.WORKSPACE_URL }}/Inputs"
            mv Build_tsv "https://github.com/suchita903/Demo123/#${{ env.WORKSPACE_URL }}/Inputs"
            mv ICD "https://github.com/suchita903/Demo123/#${{ env.WORKSPACE_URL }}/Inputs"
            mv GMLogic_ICD_Input "https://github.com/suchita903/Demo123/#${{ env.WORKSPACE_URL }}/Inputs"
        else
            mv Build_tsv "https://github.com/suchita903/Demo123/#${{ env.WORKSPACE_URL }}/Inputs"
            mv Build_tsv "https://github.com/suchita903/Demo123/#${{ env.WORKSPACE_URL }}/Inputs"
            mv ICD "https://github.com/suchita903/Demo123/#${{ env.WORKSPACE_URL }}/Inputs"
            mv GMLogic_Harness_Input "https://github.com/suchita903/Demo123/#${{ env.WORKSPACE_URL }}/Inputs"
            mv Master_Pinout_Input "https://github.com/suchita903/Demo123/#${{ env.WORKSPACE_URL }}/Inputs"
            mv UGnetlist_Input "https://github.com/suchita903/Demo123/#${{ env.WORKSPACE_URL }}/Inputs"
        fi

  Build:
    needs: Checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
	run: actions/checkout@v3
 
      - name: Set up JDK 17
      	uses: actions/setup-java@v3
      	with:
          java-version: '17'
          distribution: 'adopt' 
	  
      - name: Build
        run: |
          mvn clean install -DskipTests -U

      - name: Generate calibration and logfiles
        run: |

        # Copy the JAR file to the Inputs directory
        cp target/eio-configurator-1.0.jar Inputs/

        # Execute the Java command based on parameters
        if [ "$OBJECT_CODE" = "None" ]; then
          echo "ERROR: No OBJECT_CODE selected"
          exit 1
        elif [ "$OBJECT_CODE" = "A43" ]; then
          java -jar Inputs/eio-configurator-1.0.jar $OBJECT_CODE $WORKFLOW $CHILD_OBJECT_CODE
        elif [ "$OBJECT_CODE" = "ALL" ]; then
          java -jar Inputs/eio-configurator-1.0.jar A15,A43,A215,A836 $WORKFLOW
        else
          java -jar Inputs/eio-configurator-1.0.jar $OBJECT_CODE $WORKFLOW
        fi

    - name: Move generated files to Output directory
      run: |
        # Move files to the Output directory
        mv *Mapping.xlsx "${{ github.workspace }}/Output"
        mv *.log "${{ github.workspace }}/Logs"
        if [ -f "Circuit_Connection_Data.xlsx" ]; then mv Circuit_Connection_Data.xlsx "${{ github.workspace }}/Output"; fi
        if [ -f "Terminator_UPC_FNA_DATA.xlsx" ]; then mv Terminator_UPC_FNA_DATA.xlsx "${{ github.workspace }}/Output"; fi
        if [ -n "$(find . -maxdepth 1 -type f -name '*_Harness_Calibration_File*')" ]; then mv *_Harness_Calibration_File* "${{ github.workspace }}/Output"; fi
        if [ -n "$(find . -maxdepth 1 -type f -name '*_Calibration_Binaries_File*')" ]; then mv *_Calibration_Binaries_File* "${{ github.workspace }}/Output"; fi
        if [ -d "ICD_CALBLOCK_CRETA_FILES" ]; then mv ICD_CALBLOCK_CRETA_FILES "${{ github.workspace }}/Output"; fi
        if [ -d "ICD_MODULE_CONFIGS_CRETA_FILES" ]; then mv ICD_MODULE_CONFIGS_CRETA_FILES "${{ github.workspace }}/Output"; fi
        if [ -n "$(find . -maxdepth 1 -type f -name '*_ECM_File.csv')" ]; then mv *_ECM_File.csv "${{ github.workspace }}/Output"; fi
        if [ -n "$(find . -maxdepth 1 -type f -name '*_MODULE_CONFIG_CSV_FILE*')" ]; then mv *_MODULE_CONFIG_CSV_FILE* "${{ github.workspace }}/Output"; fi
        if [ -n "$(find . -maxdepth 1 -type f -name '*_HRN_Calblock.csv')" ]; then mv *_HRN_Calblock.csv "${{ github.workspace }}/Output"; fi
        if [ -n "$(find . -maxdepth 1 -type f -name '*_MODULE_CONFIG.*')" ]; then mv *_MODULE_CONFIG.* "${{ github.workspace }}/Output"; fi
        if [ -d "HARNESS_MODULE_CALIBRATION_CRETA_FILES" ]; then mv HARNESS_MODULE_CALIBRATION_CRETA_FILES "${{ github.workspace }}/Output"; fi
        shell: bash

        # Clean up JAR file
        rm Inputs/eio-configurator-1.0.jar

    - name: Zipping Files
      run: |
        # Create a zip file containing Inputs, Output, and Logs directories
        zip -r EIO_Config_Tool_Artifacts.zip Inputs Output Logs
        echo "********** Artifact zip created...! **********"
